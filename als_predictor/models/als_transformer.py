# -*- coding: utf-8 -*-

# attention part is borrowed from the timm package.
# decoder part is modified from https://nlp.seas.harvard.edu/2018/04/03/attention.html

import math
# import warnings
import torch
import torch.nn as nn
import numpy as np

# code from the t2t-vit paper
def get_sinusoid_encoding(n_position, d_hid):
    ''' Sinusoid position encoding table '''

    def get_position_angle_vec(position):
        return [position / np.power(10000, 2 * (hid_j // 2) / d_hid) for hid_j in range(d_hid)]

    sinusoid_table = np.array([get_position_angle_vec(pos_i) for pos_i in range(n_position)])
    sinusoid_table[:, 0::2] = np.sin(sinusoid_table[:, 0::2])  # dim 2i
    sinusoid_table[:, 1::2] = np.cos(sinusoid_table[:, 1::2])  # dim 2i+1

    return torch.FloatTensor(sinusoid_table).unsqueeze(0)


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def subsequent_mask(size):
    '''Mask out subsequent positions.'''
    subsequent_mask = np.triu(np.ones((1, size, size)), k=1).astype('uint8')
    return torch.from_numpy(subsequent_mask) == 0


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x, mask=None):
        B, N, C = x.shape
        #print(C)
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)

        attn = (q @ k.transpose(-2, -1)) * self.scale
        if mask is not None:
            mask = mask.unsqueeze(1)  # B x 1 x N_x x N_m
            attn = attn.masked_fill(mask == 0, -1e9)
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x

class CrossAttention(nn.Module):
    def __init__(self, dim, num_heads=1, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.q = nn.Linear(dim, dim, bias=qkv_bias)
        self.kv = nn.Linear(dim, dim * 2, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x, m, mask=None):
        B, N_x, C = x.shape
        N_m = m.shape[1]
        q = self.q(x).reshape(B, N_x, self.num_heads, C // self.num_heads).transpose(1, 2)
        kv = self.kv(m).reshape(B, N_m, 2, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        k, v = kv[0], kv[1]

        # B x N_h x N_x x N_m
        attn = (q @ k.transpose(-2, -1)) * self.scale
        if mask is not None:
            mask = mask.unsqueeze(1)  # B x 1 x N_x x N_m
            attn = attn.masked_fill(mask == 0, -1e9)
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        # B x N_h x N_x x C/N_h -> B x N_x x C
        x = (attn @ v).transpose(1, 2).reshape(B, N_x, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x

class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

class Block(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, mask=None):
        x = x + self.drop_path(self.attn(self.norm1(x), mask=mask))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x

class DecodeBlock(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        self.cross_attn = CrossAttention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)

        self.drop_path = nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, memory, src_mask, tgt_mask):
        m = memory
        x = x + self.drop_path(self.attn(self.norm1(x), tgt_mask))
        x = x + self.drop_path(self.cross_attn(self.norm1(x), self.norm1(m), src_mask))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x 

class ALSDecoder(nn.Module):
    def __init__(self, embed_dim, depth, input_dim=7, n_class=5, max_len=120):
        super().__init__()
        self.input_dim = input_dim
        self.embed_dim = embed_dim
        self.n_class = n_class

        # Embedding layer
        self.tgt_embed = nn.Embedding(input_dim, embed_dim)

        # Transformer decode blocks
        self.blocks = nn.ModuleList([DecodeBlock(dim=embed_dim, num_heads=1) for i in range(depth)])
        self.pos_embed = nn.Parameter(torch.zeros(1, max_len, self.embed_dim))
        trunc_normal_(self.pos_embed, std=.02)
        
        # for ALS classification
        self.mlp_head = nn.Sequential(nn.LayerNorm(embed_dim), nn.Linear(embed_dim, n_class))

    # x shape in [batch_size, sequence_len, feat_dim]
    # memory shape in [batch_size, memory_len, feat_dim]
    def forward(self, x, memory, mask=None):
        # batch size
        B = x.shape[0]
        # sequence len
        L = x.shape[1]
        # memory len
        T = memory.shape[1]
        # 0 is the padding symbol, 1 is the start symbol
        x[x < 0] = -2
        x = self.tgt_embed(x + 2)
       
        x = x + self.pos_embed[:, :L]
        
        # forward to the Transformer decoder
        if mask is None:
            src_mask = memory.new_ones(B, L, T)
        else:
            mask = mask.float()
            src_mask = (memory.new_ones(B, L, 1) @ mask.unsqueeze(-2)) > 0
        tgt_mask = subsequent_mask(L).to(x.device)
        for blk in self.blocks:
            x = blk(x, memory, src_mask, tgt_mask)

        o = self.mlp_head(x)

        return o

# Multi-class classifier of ALS disease progression
class ALSTransformer(nn.Module):
    def __init__(self, embed_dim, depth, input_dim=1024, n_class=5, n_weights=24, max_len=1024):
        super().__init__()
        self.input_dim = input_dim
        self.embed_dim = embed_dim
        self.n_class = n_class
        # Weighted-sum layer for multi-layer input features
        self.n_weights = n_weights
        self.weighted_sum = nn.Linear(n_weights, 1)

        # Transformer encode blocks
        self.blocks = nn.ModuleList([Block(dim=embed_dim, num_heads=1) for i in range(depth)])
        
        # sin pos embedding or learnable pos embedding, 55 = 50 sequence length
        # self.pos_embed = nn.Parameter(get_sinusoid_encoding(max_len+5, self.embed_dim) * 0.1, requires_grad=True)
        self.pos_embed = nn.Parameter(torch.zeros(1, max_len, self.embed_dim))
        trunc_normal_(self.pos_embed, std=.02)

        # for ALS classification
        self.in_proj = nn.Linear(self.input_dim, embed_dim)
        self.mlp_head = nn.Sequential(nn.LayerNorm(embed_dim), nn.Linear(embed_dim, n_class))
        self.layer_results = {}
        self.blocks[-1].register_forward_hook(self.get_activation('encoder_last_layer'))

    # x shape in [batch_size, sequence_len, feat_dim, n_layers]
    def forward(self, x, mask=None):
        # batch size
        B = x.shape[0]
        # sequence len
        T = x.shape[1]

        attn_mask = None
        if mask is not None:
            mask = mask.float()
            attn_mask = (mask.unsqueeze(-1) @ mask.unsqueeze(-2)) > 0

        if x.shape[-1] == 1:
            x = x.squeeze(-1)
        else:
            x = self.weighted_sum(x).squeeze(-1)

        if self.embed_dim != self.input_dim:
            x = self.in_proj(x)

        x = x + self.pos_embed[:, :T]

        # forward to the Transformer encoder
        for blk in self.blocks:
            x = blk(x, mask=attn_mask)
        
        o = self.mlp_head(x)
        
        return o

    def get_activation(self, name):
        def hook(model, input, output):
            self.layer_results[name] = output
        return hook

# Multi-class encoder decoder classifier of ALS disease progression
class ALSEncDecTransformer(nn.Module):
    def __init__(self, embed_dim, depth, input_dim=1024, n_class=5, n_weights=24, max_len=1024):
        super().__init__()
        self.n_class = n_class
        self.encoder = ALSTransformer(
            embed_dim, depth, input_dim, n_class, n_weights, max_len,
        )
        self.decoder = ALSDecoder(
            embed_dim, 1, n_class+2, n_class, max_len,
        )

    # x shape in [batch_size, sequence_len, feat_dim, n_layers]
    def forward(self, x, tgt=None, mask=None, max_len=120):
        # Prepend the start symbol to the target labels
        if tgt is None:
            return self.decode(x, max_len, mask=mask)
        else:
            tgt = torch.cat(
                [tgt.new_ones(x.shape[0], 1), tgt[:, :-1]], dim=1
            )
        _ = self.encoder(x, mask=mask)
        x = self.encoder.layer_results['encoder_last_layer']
        o = self.decoder(tgt, x, mask=mask)
        return o

    def decode(self, x, max_len, mask=None):
        _ = self.encoder(x, mask=mask)
        x = self.encoder.layer_results['encoder_last_layer']
        ys = [x.new_ones(x.shape[0]).long()]
        for i in range(max_len):
            y = torch.stack(ys, dim=1)
            logit = self.decoder(y, x, mask=mask)
            ys.append(logit.argmax(-1)[:, -1])
 
        ys = torch.stack(ys[1:], dim=-1)
        return ys
